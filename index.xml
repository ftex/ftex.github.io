<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>飞雷神 on 飞雷神</title>
    <link>http://ftex.github.io/</link>
    <description>Recent content in 飞雷神 on 飞雷神</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Apr 2019 16:39:18 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>About</title>
      <link>http://ftex.github.io/about/</link>
      <pubDate>Tue, 02 Apr 2019 16:39:18 +0800</pubDate>
      
      <guid>http://ftex.github.io/about/</guid>
      <description>

&lt;h2 id=&#34;这是一篇个人介绍页面&#34;&gt;这是一篇个人介绍页面&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;希望看到的人点赞&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>First</title>
      <link>http://ftex.github.io/post/first/</link>
      <pubDate>Sun, 02 Sep 2018 16:40:39 +0800</pubDate>
      
      <guid>http://ftex.github.io/post/first/</guid>
      <description>

&lt;h2 id=&#34;hello-hugo&#34;&gt;hello hugo&lt;/h2&gt;

&lt;h2 id=&#34;第一篇文章&#34;&gt;第一篇文章&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
public class BSearch {

    public static int searchIndex(int[] a, int begin, int end, int value) {
        if (begin &amp;gt; end) return -1;
        int middlePoint = begin + (end - begin) / 2;
        if (a[middlePoint] == value) {
            return middlePoint;
        } else if (a[middlePoint] &amp;gt; value) {
            return searchIndex(a, begin, middlePoint - 1, value);
        } else {
            return searchIndex(a, middlePoint + 1, end, value);
        }
    }

    /**
     * 查找数组中第一个出现的value
     *
     * @param a
     * @param value
     * @return
     */
    public static int bsearch2(int[] a, int begin, int end, int value) {
        if (begin &amp;gt; end) return -1;
        int mid = begin + (end - begin) / 2;
        if (a[mid] &amp;gt; value) {
            return bsearch2(a, begin, mid - 1, value);
        } else if (a[mid] &amp;lt; value) {
            return bsearch2(a, mid + 1, end, value);
        } else {
            if (mid == 0 || a[mid - 1] != value) return mid;
            return bsearch2(a, begin, mid - 1, value);
        }
    }


    public static void main(String[] args) {
//        int [] a = {1,2,3,4,5,6,7,8};
//        System.out.println(searchIndex(a,0,a.length-1,8));
        int[] a = {1, 6, 8, 8, 8, 8, 8};
        System.out.println(bsearch2(a, 0, a.length - 1, 8));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Akka支持可扩展的实时事务处理。我们相信编写出正确的、具有容错性和可扩展性的并发程序太困难了。这多数是因为使用了错误的工具和错误的抽象级别。Akka就是为了改变这种状况而生的。通过使用Actor模型提升了抽象级别，为构建可扩展的、有弹性的响应式并发应用提供了一个更好的平台，详见响应式宣言。在容错性方面Akka采用了“let it crash”（让它崩溃）模型，该模型已经在电信行业构建出“自愈合”的应用和永不停机的系统，取得了巨大成功。Actor还为透明的分布式系统以及真正的可扩展高容错应用的基础进行了抽象。&lt;/p&gt;

&lt;p&gt;一个Actor是一个容器，它包含了状态，行为，一个邮箱，子Actor和一个监管策略。所有这些封装在一个Actor引用里。最终在Actor终止时，会有这些发生。&lt;/p&gt;

&lt;p&gt;Actor使你能够进行服务失败管理（监控），负载管理（缓和策略、超时和处理隔离），以及水平和垂直方向上的可扩展性（增加cpu核数和/或增加更多的机器）管理。&lt;/p&gt;

&lt;h3 id=&#34;akka-实现了独特的混合模型&#34;&gt;Akka 实现了独特的混合模型&lt;/h3&gt;

&lt;h4 id=&#34;actors&#34;&gt;Actors&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;对并发/并行程序的简单的、高级别的抽象；&lt;/li&gt;
&lt;li&gt;异步、非阻塞、高性能的事件驱动编程模型；&lt;/li&gt;
&lt;li&gt;非常轻量的事件驱动处理（1G内存可容纳数百万个actors）；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;容错性&#34;&gt;容错性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;使用“let-it-crash”语义的监控层次体系；&lt;/li&gt;
&lt;li&gt;监控层次&lt;a href=&#34;http://www.baidu.com&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;体系&lt;/a&gt;可以跨越多个JVM，从而提供真正的容错系统；&lt;/li&gt;
&lt;li&gt;非常适合编写永不停机、自愈合的高容错系统；&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;位置透明性&#34;&gt;位置透明性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Akka的所有元素都为分布式环境而设计：所有actor只通过发送消息进行交互，所有操作都是异步的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;持久性&#34;&gt;持久性&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Actor接收到的消息可以选择性的被持久化，并在actor启动或重启的时候重放。这使得actor能够恢复其状态，即使是在JVM崩溃或正在迁移到另外节点的情况下。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>